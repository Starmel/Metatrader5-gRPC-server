syntax = "proto3";

package market_data;

import "google/protobuf/timestamp.proto";

// Tick Flags Enumeration
enum TickFlags {
    TICK_FLAG_NONE = 0;
    TICK_FLAG_BID = 1;        // Bid price changed
    TICK_FLAG_ASK = 2;        // Ask price changed
    TICK_FLAG_LAST = 4;       // Last deal price changed
    TICK_FLAG_VOLUME = 8;     // Volume changed
    TICK_FLAG_BUY = 16;       // Tick is a result of a buy deal
    TICK_FLAG_SELL = 32;      // Tick is a result of a sell deal
}

// Tick Data Structure
message SymbolTick {
    // Time of the last prices update
    google.protobuf.Timestamp time = 1;

    // Millisecond-precise timestamp
    int64 time_msc = 2;

    // Price information
    double bid = 3;           // Current Bid price
    double ask = 4;           // Current Ask price
    double last = 5;          // Price of the last deal

    // Volume information
    uint64 volume = 6;        // Volume for the current last price (integer)
    double volume_real = 7;   // Volume with greater accuracy

    // Tick flags
    repeated TickFlags flags = 8;
}

// Symbol Info Request
message SymbolInfoRequest {
    string symbol = 1;        // Symbol name to fetch tick data for
}

// Symbol Info Service
service SymbolInfoService {
    // Get the latest tick for a specific symbol
    rpc GetLatestTick(SymbolInfoRequest) returns (SymbolTick) {}

    // Get historical ticks with filtering options
    rpc GetTickHistory(TickHistoryRequest) returns (TickHistoryResponse) {}
}

// Tick History Request with Advanced Filtering
message TickHistoryRequest {
    string symbol = 1;            // Symbol name
    google.protobuf.Timestamp from_time = 2;
    google.protobuf.Timestamp to_time = 3;

    // Optional filtering
    bool include_bid_changes = 4;
    bool include_ask_changes = 5;
    bool include_last_price_changes = 6;
    bool include_volume_changes = 7;
    bool include_buy_ticks = 8;
    bool include_sell_ticks = 9;

    // Pagination
    uint32 page_size = 10;
    uint32 page_token = 11;
}

// Tick History Response
message TickHistoryResponse {
    repeated SymbolTick ticks = 1;
    uint32 total_count = 2;
    uint32 next_page_token = 3;
}

// Error Details for Tick Retrieval
message TickErrorDetails {
    enum ErrorCode {
        SYMBOL_NOT_FOUND = 0;
        DATA_RETRIEVAL_FAILED = 1;
        NETWORK_ERROR = 2;
        RATE_LIMIT_EXCEEDED = 3;
    }

    ErrorCode code = 1;
    string message = 2;
}